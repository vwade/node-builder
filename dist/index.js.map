{"version":3,"sources":["../src/core/id.ts","../src/core/graph.ts","../src/core/history.ts","../src/core/commands.ts","../src/core/serialize.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const counters = new Map<string, number>();\n\nexport function gen_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\tcounters.set(prefix, counter);\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function peek_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function reset_ids(seed?: Record<string, number>): void {\n\tcounters.clear();\n\tif (!seed) {\n\t\treturn;\n\t}\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tcounters.set(prefix, value);\n\t}\n}\n\nexport function prime_ids(seed: Record<string, number>): void {\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tconst current = counters.get(prefix) ?? 0;\n\t\tif (value > current) {\n\t\t\tcounters.set(prefix, value);\n\t\t}\n\t}\n}\n","import { gen_id } from './id.js';\nimport type {\n\tEdge,\n\tEdge_id,\n\tGraph,\n\tNode,\n\tNode_id,\n\tPort,\n\tPort_id,\n} from './types.js';\n\nexport interface Connect_input {\n\tfrom: { node_id: Node_id; port_id: Port_id };\n\tto: { node_id: Node_id; port_id: Port_id };\n\tid?: Edge_id;\n\tdata?: Edge['data'];\n}\n\nexport function create_graph(): Graph {\n\treturn {\n\t\tnodes: new Map(),\n\t\tedges: new Map(),\n\t};\n}\n\nexport function clone_graph(graph: Graph): Graph {\n\treturn {\n\t\tnodes: new Map(graph.nodes),\n\t\tedges: new Map(graph.edges),\n\t};\n}\n\nexport function add_node(graph: Graph, node: Node): Graph {\n\tif (graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" already exists`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function update_node(graph: Graph, node: Node): Graph {\n\tif (!graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" does not exist`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function remove_node(graph: Graph, node_id: Node_id): Graph {\n\tif (!graph.nodes.has(node_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.delete(node_id);\n\tfor (const [edge_id, edge] of next.edges) {\n\t\tif (edge.from.node_id === node_id || edge.to.node_id === node_id) {\n\t\t\tnext.edges.delete(edge_id);\n\t\t}\n\t}\n\treturn next;\n}\n\nexport function move_nodes(graph: Graph, node_ids: Node_id[], dx: number, dy: number): Graph {\n\tif (!dx && !dy) {\n\t\treturn graph;\n\t}\n\tlet mutated = false;\n\tconst next = clone_graph(graph);\n\tfor (const node_id of node_ids) {\n\t\tconst existing = next.nodes.get(node_id);\n\t\tif (!existing) {\n\t\t\tcontinue;\n\t\t}\n\t\tmutated = true;\n\t\tnext.nodes.set(node_id, {\n\t\t\t...existing,\n\t\t\tx: existing.x + dx,\n\t\t\ty: existing.y + dy,\n\t\t});\n\t}\n\treturn mutated ? next : graph;\n}\n\nexport function set_node_position(graph: Graph, node_id: Node_id, x: number, y: number): Graph {\n\tconst existing = graph.nodes.get(node_id);\n\tif (!existing) {\n\t\tthrow new Error(`Node with id \"${node_id}\" does not exist`);\n\t}\n\tif (existing.x === x && existing.y === y) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(node_id, {\n\t\t...existing,\n\t\tx,\n\t\ty,\n\t});\n\treturn next;\n}\n\nexport function connect(graph: Graph, input: Connect_input): Graph {\n\tconst { from, to } = input;\n\tconst from_node = graph.nodes.get(from.node_id);\n\tconst to_node = graph.nodes.get(to.node_id);\n\tif (!from_node) {\n\t\tthrow new Error(`Cannot connect from missing node \"${from.node_id}\"`);\n\t}\n\tif (!to_node) {\n\t\tthrow new Error(`Cannot connect to missing node \"${to.node_id}\"`);\n\t}\n\tconst from_port = find_port(from_node, from.port_id);\n\tconst to_port = find_port(to_node, to.port_id);\n\tif (!from_port) {\n\t\tthrow new Error(`Port \"${from.port_id}\" not found on node \"${from.node_id}\"`);\n\t}\n\tif (!to_port) {\n\t\tthrow new Error(`Port \"${to.port_id}\" not found on node \"${to.node_id}\"`);\n\t}\n\tif (from_port.kind === 'in') {\n\t\tthrow new Error(`Cannot connect from an input port \"${from.port_id}\"`);\n\t}\n\tif (to_port.kind === 'out') {\n\t\tthrow new Error(`Cannot connect to an output port \"${to.port_id}\"`);\n\t}\n\tconst edge_id = input.id ?? gen_id('e');\n\tif (graph.edges.has(edge_id)) {\n\t\tthrow new Error(`Edge with id \"${edge_id}\" already exists`);\n\t}\n\tconst next = clone_graph(graph);\n\tconst edge: Edge = {\n\t\tid: edge_id,\n\t\tfrom: { node_id: from.node_id, port_id: from.port_id },\n\t\tto: { node_id: to.node_id, port_id: to.port_id },\n\t\tdata: input.data,\n\t};\n\tnext.edges.set(edge.id, edge);\n\treturn next;\n}\n\nexport function remove_edge(graph: Graph, edge_id: Edge_id): Graph {\n\tif (!graph.edges.has(edge_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.edges.delete(edge_id);\n\treturn next;\n}\n\nexport function disconnect(graph: Graph, edge_id: Edge_id): Graph {\n\treturn remove_edge(graph, edge_id);\n}\n\nfunction normalize_node(node: Node): Node {\n\tconst seen = new Set<Port_id>();\n\tconst ports = node.ports.map((port, index) => {\n\t\tconst id = port.id ?? `${node.id}_port_${index}`;\n\t\tif (seen.has(id)) {\n\t\t\tthrow new Error(`Duplicate port id \"${id}\" on node \"${node.id}\"`);\n\t\t}\n\t\tseen.add(id);\n\t\treturn {\n\t\t\t...port,\n\t\t\tid,\n\t\t\tnode_id: node.id,\n\t\t\tindex: port.index ?? index,\n\t\t};\n\t});\n\treturn {\n\t\t...node,\n\t\tports,\n\t};\n}\n\nfunction find_port(node: Node, port_id: Port_id): Port | undefined {\n\treturn node.ports.find((port) => port.id === port_id);\n}\n","import type { Graph } from './types.js';\n\nexport interface History {\n\tpast: Graph[];\n\tpresent: Graph;\n\tfuture: Graph[];\n\tlimit: number;\n}\n\nexport function create_history(initial: Graph, limit = 100): History {\n\tif (limit <= 0) {\n\t\tthrow new Error('History limit must be greater than zero');\n\t}\n\treturn {\n\t\tpast: [],\n\t\tpresent: initial,\n\t\tfuture: [],\n\t\tlimit,\n\t};\n}\n\nexport function push(history: History, graph: Graph): History {\n\tif (history.present === graph) {\n\t\treturn history;\n\t}\n\tconst trimmed =\n\t\thistory.past.length >= history.limit\n\t\t\t? [...history.past.slice(1), history.present]\n\t\t\t: [...history.past, history.present];\n\treturn {\n\t\tpast: trimmed,\n\t\tpresent: graph,\n\t\tfuture: [],\n\t\tlimit: history.limit,\n\t};\n}\n\nexport function undo(history: History): History {\n\tif (!history.past.length) {\n\t\treturn history;\n\t}\n\tconst previous = history.past[history.past.length - 1];\n\treturn {\n\t\tpast: history.past.slice(0, -1),\n\t\tpresent: previous,\n\t\tfuture: [history.present, ...history.future],\n\t\tlimit: history.limit,\n\t};\n}\n\nexport function redo(history: History): History {\n\tif (!history.future.length) {\n\t\treturn history;\n\t}\n\tconst next = history.future[0];\n\treturn {\n\t\tpast: [...history.past, history.present],\n\t\tpresent: next,\n\t\tfuture: history.future.slice(1),\n\t\tlimit: history.limit,\n\t};\n}\n\nexport function can_undo(history: History): boolean {\n\treturn history.past.length > 0;\n}\n\nexport function can_redo(history: History): boolean {\n\treturn history.future.length > 0;\n}\n","import { add_node, connect, move_nodes, remove_edge, remove_node } from './graph.js';\nimport { can_redo, can_undo, create_history, push, redo, undo } from './history.js';\nimport type { Connect_input } from './graph.js';\nimport type { History } from './history.js';\nimport type { Command, Edge_id, Graph, Node, Node_id } from './types.js';\n\nexport interface Command_state {\n\thistory: History;\n}\n\nexport function create_command_state(initial: Graph, limit = 100): Command_state {\n\treturn {\n\t\thistory: create_history(initial, limit),\n\t};\n}\n\nexport function get_present_graph(state: Command_state): Graph {\n\treturn state.history.present;\n}\n\nexport function execute_command<R>(state: Command_state, command: Command<R>): { state: Command_state; result?: R } {\n\tconst { graph, result } = command.do(state.history.present);\n\tconst history = push(state.history, graph);\n\tif (history === state.history) {\n\t\treturn { state, result };\n\t}\n\treturn {\n\t\tstate: { history },\n\t\tresult,\n\t};\n}\n\nexport function undo_command(state: Command_state): Command_state {\n\tconst history = undo(state.history);\n\treturn history === state.history ? state : { history };\n}\n\nexport function redo_command(state: Command_state): Command_state {\n\tconst history = redo(state.history);\n\treturn history === state.history ? state : { history };\n}\n\nexport function can_undo_command(state: Command_state): boolean {\n\treturn can_undo(state.history);\n}\n\nexport function can_redo_command(state: Command_state): boolean {\n\treturn can_redo(state.history);\n}\n\nexport function create_add_node_command(node: Node): Command<Node> {\n\treturn {\n\t\ttype: 'add_node',\n\t\tpayload: node,\n\t\tdo(graph) {\n\t\t\treturn { graph: add_node(graph, node), result: node };\n\t\t},\n\t\tundo(graph) {\n\t\t\treturn remove_node(graph, node.id);\n\t\t},\n\t};\n}\n\nexport function create_move_nodes_command(node_ids: Node_id[], dx: number, dy: number): Command<void> {\n\treturn {\n\t\ttype: 'move_nodes',\n\t\tpayload: { node_ids, dx, dy },\n\t\tdo(graph) {\n\t\t\treturn { graph: move_nodes(graph, node_ids, dx, dy) };\n\t\t},\n\t\tundo(graph) {\n\t\t\treturn move_nodes(graph, node_ids, -dx, -dy);\n\t\t},\n\t};\n}\n\nexport function create_connect_command(input: Connect_input): Command<Edge_id> {\n\tlet created_edge_id: Edge_id | null = input.id ?? null;\n\treturn {\n\t\ttype: 'connect',\n\t\tpayload: input,\n\t\tdo(graph) {\n\t\t\tconst before = created_edge_id ? null : new Set(graph.edges.keys());\n\t\t\tconst next = connect(graph, input);\n\t\t\tif (!created_edge_id) {\n\t\t\t\tfor (const candidate of next.edges.keys()) {\n\t\t\t\t\tif (!before?.has(candidate)) {\n\t\t\t\t\t\tcreated_edge_id = candidate;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!created_edge_id) {\n\t\t\t\tthrow new Error('Failed to determine edge id for connect command');\n\t\t\t}\n\t\t\treturn { graph: next, result: created_edge_id };\n\t\t},\n\t\tundo(graph) {\n\t\t\tif (!created_edge_id) {\n\t\t\t\treturn graph;\n\t\t\t}\n\t\t\treturn remove_edge(graph, created_edge_id);\n\t\t},\n\t};\n}\n\nexport function create_disconnect_command(edge_id: Edge_id): Command<void> {\n\treturn {\n\t\ttype: 'disconnect',\n\t\tpayload: edge_id,\n\t\tdo(graph) {\n\t\t\treturn { graph: remove_edge(graph, edge_id) };\n\t\t},\n\t};\n}\n","import type { Edge, Graph, Node } from './types.js';\nimport { add_node, connect, create_graph } from './graph.js';\nimport { prime_ids } from './id.js';\n\nexport interface Serialized_graph {\n\tnodes: Node[];\n\tedges: Edge[];\n}\n\nexport function serialize_graph(graph: Graph): Serialized_graph {\n\treturn {\n\t\tnodes: [...graph.nodes.values()].map(clone_node),\n\t\tedges: [...graph.edges.values()].map(clone_edge),\n\t};\n}\n\nexport function deserialize_graph(serialized: Serialized_graph): Graph {\n\tconst seed: Record<string, number> = {};\n\tfor (const node of serialized.nodes) {\n\t\ttrack_id(seed, node.id);\n\t}\n\tfor (const edge of serialized.edges) {\n\t\ttrack_id(seed, edge.id);\n\t}\n\tif (Object.keys(seed).length) {\n\t\tprime_ids(seed);\n\t}\n\tlet graph = create_graph();\n\tfor (const node of serialized.nodes) {\n\t\tgraph = add_node(graph, clone_node(node));\n\t}\n\tfor (const edge of serialized.edges) {\n\t\tgraph = connect(graph, {\n\t\t\tfrom: { ...edge.from },\n\t\t\tto: { ...edge.to },\n\t\t\tid: edge.id,\n\t\t\tdata: edge.data,\n\t\t});\n\t}\n\treturn graph;\n}\n\nfunction track_id(seed: Record<string, number>, id: string): void {\n\tconst separator = id.lastIndexOf('_');\n\tif (separator <= 0 || separator === id.length - 1) {\n\t\treturn;\n\t}\n\tconst prefix = id.slice(0, separator);\n\tconst raw = id.slice(separator + 1);\n\tconst value = parseInt(raw, 36);\n\tif (Number.isNaN(value)) {\n\t\treturn;\n\t}\n\tconst current = seed[prefix];\n\tif (!current || value > current) {\n\t\tseed[prefix] = value;\n\t}\n}\n\nfunction clone_node(node: Node): Node {\n\treturn {\n\t\t...node,\n\t\tports: node.ports.map((port) => ({ ...port })),\n\t};\n}\n\nfunction clone_edge(edge: Edge): Edge {\n\treturn {\n\t\t...edge,\n\t\tfrom: { ...edge.from },\n\t\tto: { ...edge.to },\n\t};\n}\n"]}
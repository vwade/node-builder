{"version":3,"sources":["../src/core/id.ts","../src/core/graph.ts","../src/core/serialize.ts","../src/core/history.ts","../src/core/selection.ts","../src/react/transform.ts","../src/react/canvas.tsx"],"names":["nodes","edges","to_world"],"mappings":"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","file":"index.js","sourcesContent":["const counters = new Map<string, number>();\n\nexport function gen_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\tcounters.set(prefix, counter);\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function peek_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function reset_ids(seed?: Record<string, number>): void {\n\tcounters.clear();\n\tif (!seed) {\n\t\treturn;\n\t}\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tcounters.set(prefix, value);\n\t}\n}\n\nexport function prime_ids(seed: Record<string, number>): void {\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tconst current = counters.get(prefix) ?? 0;\n\t\tif (value > current) {\n\t\t\tcounters.set(prefix, value);\n\t\t}\n\t}\n}\n","import { gen_id } from './id.js';\nimport type {\n\tEdge,\n\tEdge_id,\n\tGraph,\n\tNode,\n\tNode_id,\n\tPort,\n\tPort_id,\n} from './types.js';\n\nexport interface Connect_input {\n\tfrom: { node_id: Node_id; port_id: Port_id };\n\tto: { node_id: Node_id; port_id: Port_id };\n\tid?: Edge_id;\n\tdata?: Edge['data'];\n}\n\nexport function create_graph(): Graph {\n\treturn {\n\t\tnodes: new Map(),\n\t\tedges: new Map(),\n\t};\n}\n\nexport function clone_graph(graph: Graph): Graph {\n\treturn {\n\t\tnodes: new Map(graph.nodes),\n\t\tedges: new Map(graph.edges),\n\t};\n}\n\nexport function add_node(graph: Graph, node: Node): Graph {\n\tif (graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" already exists`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function update_node(graph: Graph, node: Node): Graph {\n\tif (!graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" does not exist`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function remove_node(graph: Graph, node_id: Node_id): Graph {\n\tif (!graph.nodes.has(node_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.delete(node_id);\n\tfor (const [edge_id, edge] of next.edges) {\n\t\tif (edge.from.node_id === node_id || edge.to.node_id === node_id) {\n\t\t\tnext.edges.delete(edge_id);\n\t\t}\n\t}\n\treturn next;\n}\n\nexport function move_nodes(graph: Graph, node_ids: Node_id[], dx: number, dy: number): Graph {\n\tif (!dx && !dy) {\n\t\treturn graph;\n\t}\n\tlet mutated = false;\n\tconst next = clone_graph(graph);\n\tfor (const node_id of node_ids) {\n\t\tconst existing = next.nodes.get(node_id);\n\t\tif (!existing) {\n\t\t\tcontinue;\n\t\t}\n\t\tmutated = true;\n\t\tnext.nodes.set(node_id, {\n\t\t\t...existing,\n\t\t\tx: existing.x + dx,\n\t\t\ty: existing.y + dy,\n\t\t});\n\t}\n\treturn mutated ? next : graph;\n}\n\nexport function set_node_position(graph: Graph, node_id: Node_id, x: number, y: number): Graph {\n\tconst existing = graph.nodes.get(node_id);\n\tif (!existing) {\n\t\tthrow new Error(`Node with id \"${node_id}\" does not exist`);\n\t}\n\tif (existing.x === x && existing.y === y) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(node_id, {\n\t\t...existing,\n\t\tx,\n\t\ty,\n\t});\n\treturn next;\n}\n\nexport function connect(graph: Graph, input: Connect_input): Graph {\n\tconst { from, to } = input;\n\tconst from_node = graph.nodes.get(from.node_id);\n\tconst to_node = graph.nodes.get(to.node_id);\n\tif (!from_node) {\n\t\tthrow new Error(`Cannot connect from missing node \"${from.node_id}\"`);\n\t}\n\tif (!to_node) {\n\t\tthrow new Error(`Cannot connect to missing node \"${to.node_id}\"`);\n\t}\n\tconst from_port = find_port(from_node, from.port_id);\n\tconst to_port = find_port(to_node, to.port_id);\n\tif (!from_port) {\n\t\tthrow new Error(`Port \"${from.port_id}\" not found on node \"${from.node_id}\"`);\n\t}\n\tif (!to_port) {\n\t\tthrow new Error(`Port \"${to.port_id}\" not found on node \"${to.node_id}\"`);\n\t}\n\tif (from_port.kind === 'in') {\n\t\tthrow new Error(`Cannot connect from an input port \"${from.port_id}\"`);\n\t}\n\tif (to_port.kind === 'out') {\n\t\tthrow new Error(`Cannot connect to an output port \"${to.port_id}\"`);\n\t}\n\tconst edge_id = input.id ?? gen_id('e');\n\tif (graph.edges.has(edge_id)) {\n\t\tthrow new Error(`Edge with id \"${edge_id}\" already exists`);\n\t}\n\tconst next = clone_graph(graph);\n\tconst edge: Edge = {\n\t\tid: edge_id,\n\t\tfrom: { node_id: from.node_id, port_id: from.port_id },\n\t\tto: { node_id: to.node_id, port_id: to.port_id },\n\t\tdata: input.data,\n\t};\n\tnext.edges.set(edge.id, edge);\n\treturn next;\n}\n\nexport function remove_edge(graph: Graph, edge_id: Edge_id): Graph {\n\tif (!graph.edges.has(edge_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.edges.delete(edge_id);\n\treturn next;\n}\n\nexport function disconnect(graph: Graph, edge_id: Edge_id): Graph {\n\treturn remove_edge(graph, edge_id);\n}\n\nfunction normalize_node(node: Node): Node {\n\tconst seen = new Set<Port_id>();\n\tconst ports = node.ports.map((port, index) => {\n\t\tconst id = port.id ?? `${node.id}_port_${index}`;\n\t\tif (seen.has(id)) {\n\t\t\tthrow new Error(`Duplicate port id \"${id}\" on node \"${node.id}\"`);\n\t\t}\n\t\tseen.add(id);\n\t\treturn {\n\t\t\t...port,\n\t\t\tid,\n\t\t\tnode_id: node.id,\n\t\t\tindex: port.index ?? index,\n\t\t};\n\t});\n\treturn {\n\t\t...node,\n\t\tports,\n\t};\n}\n\nfunction find_port(node: Node, port_id: Port_id): Port | undefined {\n\treturn node.ports.find((port) => port.id === port_id);\n}\n","import type { Edge, Graph, Node } from './types.js';\nimport { add_node, connect, create_graph } from './graph.js';\nimport { prime_ids } from './id.js';\n\nexport interface Serialized_graph {\n\tnodes: Node[];\n\tedges: Edge[];\n}\n\nexport function serialize_graph(graph: Graph): Serialized_graph {\n\treturn {\n\t\tnodes: [...graph.nodes.values()].map(clone_node),\n\t\tedges: [...graph.edges.values()].map(clone_edge),\n\t};\n}\n\nexport function deserialize_graph(serialized: Serialized_graph): Graph {\n\tconst seeds = collect_id_seeds(serialized);\n\tif (Object.keys(seeds).length > 0) {\n\t\tprime_ids(seeds);\n\t}\n\tlet graph = create_graph();\n\tfor (const node of serialized.nodes) {\n\t\tgraph = add_node(graph, clone_node(node));\n\t}\n\tfor (const edge of serialized.edges) {\n\t\tgraph = connect(graph, {\n\t\t\tfrom: { ...edge.from },\n\t\t\tto: { ...edge.to },\n\t\t\tid: edge.id,\n\t\t\tdata: edge.data,\n\t\t});\n\t}\n\treturn graph;\n}\n\nfunction clone_node(node: Node): Node {\n\treturn {\n\t\t...node,\n\t\tports: node.ports.map((port) => ({ ...port })),\n\t};\n}\n\nfunction clone_edge(edge: Edge): Edge {\n\treturn {\n\t\t...edge,\n\t\tfrom: { ...edge.from },\n\t\tto: { ...edge.to },\n\t};\n}\n\nfunction collect_id_seeds(serialized: Serialized_graph): Record<string, number> {\n\tconst maxima = new Map<string, number>();\n\tfor (const node of serialized.nodes) {\n\t\trecord_max_suffix(maxima, node.id);\n\t}\n\tfor (const edge of serialized.edges) {\n\t\trecord_max_suffix(maxima, edge.id);\n\t}\n\treturn Object.fromEntries(maxima);\n}\n\nfunction record_max_suffix(target: Map<string, number>, id: string | undefined): void {\n\tif (!id) {\n\t\treturn;\n\t}\n\tconst separator = id.lastIndexOf('_');\n\tif (separator === -1 || separator === id.length - 1) {\n\t\treturn;\n\t}\n\tconst prefix = id.slice(0, separator);\n\tconst suffix = id.slice(separator + 1);\n\tif (!/^[0-9a-z]+$/i.test(suffix)) {\n\t\treturn;\n\t}\n\tconst value = parseInt(suffix, 36);\n\tif (Number.isNaN(value)) {\n\t\treturn;\n\t}\n\tconst current = target.get(prefix) ?? 0;\n\tif (value > current) {\n\t\ttarget.set(prefix, value);\n\t}\n}\n","import type { Command, Graph } from './types.js';\n\nexport interface Command_entry<R = unknown> {\n\tcommand: Command<R>;\n\tgraph_before: Graph;\n\tgraph_after: Graph;\n\tresult?: R;\n}\n\nexport interface History_state {\n\tgraph: Graph;\n\tundo_stack: Command_entry[];\n\tredo_stack: Command_entry[];\n}\n\nexport interface Execute_result<R = unknown> {\n\thistory: History_state;\n\tresult?: R;\n}\n\nexport function create_history(initial_graph: Graph): History_state {\n\treturn {\n\t\tgraph: initial_graph,\n\t\tundo_stack: [],\n\t\tredo_stack: [],\n\t};\n}\n\nexport function execute_command<R>(history: History_state, command: Command<R>): Execute_result<R> {\n\tconst { graph: graph_before } = history;\n\tconst { graph: graph_after, result } = command.do(graph_before);\n\tconst mutated = graph_after !== graph_before;\n\tif (!mutated) {\n\t\treturn {\n\t\t\thistory: {\n\t\t\t\tgraph: graph_after,\n\t\t\t\tundo_stack: history.undo_stack,\n\t\t\t\tredo_stack: history.redo_stack,\n\t\t\t},\n\t\t\tresult,\n\t\t};\n\t}\n\tconst entry: Command_entry<R> = {\n\t\tcommand,\n\t\tgraph_before,\n\t\tgraph_after,\n\t\tresult,\n\t};\n\treturn {\n\t\thistory: {\n\t\t\tgraph: graph_after,\n\t\t\tundo_stack: [...history.undo_stack, entry],\n\t\t\tredo_stack: [],\n\t\t},\n\t\tresult,\n\t};\n}\n\nexport function undo(history: History_state): History_state {\n\tif (!history.undo_stack.length) {\n\t\treturn history;\n\t}\n\tconst next_undo_stack = history.undo_stack.slice(0, -1);\n\tconst entry = history.undo_stack[history.undo_stack.length - 1];\n\tconst previous_graph = entry.command.undo ? entry.command.undo(history.graph) : entry.graph_before;\n\treturn {\n\t\tgraph: previous_graph,\n\t\tundo_stack: next_undo_stack,\n\t\tredo_stack: [...history.redo_stack, entry],\n\t};\n}\n\nexport function redo(history: History_state): History_state {\n\tif (!history.redo_stack.length) {\n\t\treturn history;\n\t}\n\tconst next_redo_stack = history.redo_stack.slice(0, -1);\n\tconst entry = history.redo_stack[history.redo_stack.length - 1];\n\treturn {\n\t\tgraph: entry.graph_after,\n\t\tundo_stack: [...history.undo_stack, entry],\n\t\tredo_stack: next_redo_stack,\n\t};\n}\n\nexport function clear_history(history: History_state, graph: Graph): History_state {\n\treturn {\n\t\tgraph,\n\t\tundo_stack: [],\n\t\tredo_stack: [],\n\t};\n}\n\nexport function can_undo(history: History_state): boolean {\n\treturn history.undo_stack.length > 0;\n}\n\nexport function can_redo(history: History_state): boolean {\n\treturn history.redo_stack.length > 0;\n}\n","import type { Edge_id, Node_id } from './types.js';\n\nexport type Selection_kind = 'node' | 'edge';\n\nexport interface Selection_state {\n\tnodes: Set<Node_id>;\n\tedges: Set<Edge_id>;\n}\n\nexport interface Select_options {\n\tappend?: boolean;\n}\n\nexport function create_selection(): Selection_state {\n\treturn {\n\t\tnodes: new Set(),\n\t\tedges: new Set(),\n\t};\n}\n\nexport function clear_selection(selection: Selection_state): Selection_state {\n\tif (!selection.nodes.size && !selection.edges.size) {\n\t\treturn selection;\n\t}\n\treturn create_selection();\n}\n\nexport function is_node_selected(selection: Selection_state, node_id: Node_id): boolean {\n\treturn selection.nodes.has(node_id);\n}\n\nexport function is_edge_selected(selection: Selection_state, edge_id: Edge_id): boolean {\n\treturn selection.edges.has(edge_id);\n}\n\nexport function select_node(selection: Selection_state, node_id: Node_id, options: Select_options = {}): Selection_state {\n\tconst append = options.append ?? false;\n\tif (append) {\n\t\tif (selection.nodes.has(node_id)) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst nodes = new Set(selection.nodes);\n\t\tnodes.add(node_id);\n\t\treturn {\n\t\t\tnodes,\n\t\t\tedges: new Set(selection.edges),\n\t\t};\n\t}\n\tconst already_only_node = selection.nodes.size === 1 && selection.nodes.has(node_id);\n\tif (already_only_node && !selection.edges.size) {\n\t\treturn selection;\n\t}\n\tconst nodes = new Set<Node_id>();\n\tnodes.add(node_id);\n\treturn {\n\t\tnodes,\n\t\tedges: new Set<Edge_id>(),\n\t};\n}\n\nexport function select_edge(selection: Selection_state, edge_id: Edge_id, options: Select_options = {}): Selection_state {\n\tconst append = options.append ?? false;\n\tif (append) {\n\t\tif (selection.edges.has(edge_id)) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst edges = new Set(selection.edges);\n\t\tedges.add(edge_id);\n\t\treturn {\n\t\t\tnodes: new Set(selection.nodes),\n\t\t\tedges,\n\t\t};\n\t}\n\tconst already_only_edge = selection.edges.size === 1 && selection.edges.has(edge_id);\n\tif (already_only_edge && !selection.nodes.size) {\n\t\treturn selection;\n\t}\n\tconst edges = new Set<Edge_id>();\n\tedges.add(edge_id);\n\treturn {\n\t\tnodes: new Set<Node_id>(),\n\t\tedges,\n\t};\n}\n\nexport function deselect_node(selection: Selection_state, node_id: Node_id): Selection_state {\n\tif (!selection.nodes.has(node_id)) {\n\t\treturn selection;\n\t}\n\tconst nodes = new Set(selection.nodes);\n\tnodes.delete(node_id);\n\tif (!nodes.size && !selection.edges.size) {\n\t\treturn create_selection();\n\t}\n\treturn {\n\t\tnodes,\n\t\tedges: new Set(selection.edges),\n\t};\n}\n\nexport function deselect_edge(selection: Selection_state, edge_id: Edge_id): Selection_state {\n\tif (!selection.edges.has(edge_id)) {\n\t\treturn selection;\n\t}\n\tconst edges = new Set(selection.edges);\n\tedges.delete(edge_id);\n\tif (!edges.size && !selection.nodes.size) {\n\t\treturn create_selection();\n\t}\n\treturn {\n\t\tnodes: new Set(selection.nodes),\n\t\tedges,\n\t};\n}\n\nexport function toggle_node(selection: Selection_state, node_id: Node_id): Selection_state {\n\treturn selection.nodes.has(node_id)\n\t\t? deselect_node(selection, node_id)\n\t\t: select_node(selection, node_id, { append: true });\n}\n\nexport function toggle_edge(selection: Selection_state, edge_id: Edge_id): Selection_state {\n\treturn selection.edges.has(edge_id)\n\t\t? deselect_edge(selection, edge_id)\n\t\t: select_edge(selection, edge_id, { append: true });\n}\n\nexport function to_selection_arrays(selection: Selection_state): { nodes: Node_id[]; edges: Edge_id[] } {\n\treturn {\n\t\tnodes: [...selection.nodes],\n\t\tedges: [...selection.edges],\n\t};\n}\n","export interface Canvas_point {\n\tx: number;\n\ty: number;\n}\n\nexport interface Canvas_transform {\n\tx: number;\n\ty: number;\n\tscale: number;\n}\n\nexport interface Zoom_options {\n\tmin_scale: number;\n\tmax_scale: number;\n\tzoom_sensitivity: number;\n}\n\nexport const DEFAULT_TRANSFORM: Canvas_transform = {\n\tx: 0,\n\ty: 0,\n\tscale: 1,\n};\n\nexport const DEFAULT_ZOOM_OPTIONS: Zoom_options = {\n\tmin_scale: 0.25,\n\tmax_scale: 4,\n\tzoom_sensitivity: 0.0015,\n};\n\nexport function pan_by(transform: Canvas_transform, dx: number, dy: number): Canvas_transform {\n\tif (!dx && !dy) {\n\t\treturn transform;\n\t}\n\treturn {\n\t\t...transform,\n\t\tx: transform.x + dx,\n\t\ty: transform.y + dy,\n\t};\n}\n\nexport function zoom_at(\n\ttransform: Canvas_transform,\n\tpoint: Canvas_point,\n\tdelta: number,\n\toptions: Zoom_options = DEFAULT_ZOOM_OPTIONS,\n): Canvas_transform {\n\tif (!delta) {\n\t\treturn transform;\n\t}\n\tconst target_scale = clamp_scale(\n\t\ttransform.scale * Math.exp(-delta * options.zoom_sensitivity),\n\t\toptions.min_scale,\n\t\toptions.max_scale,\n\t);\n\tif (target_scale === transform.scale) {\n\t\treturn transform;\n\t}\n\tconst world = to_world(transform, point);\n\treturn {\n\t\tscale: target_scale,\n\t\tx: point.x - world.x * target_scale,\n\t\ty: point.y - world.y * target_scale,\n\t};\n}\n\nexport function to_screen(transform: Canvas_transform, point: Canvas_point): Canvas_point {\n\treturn {\n\t\tx: point.x * transform.scale + transform.x,\n\t\ty: point.y * transform.scale + transform.y,\n\t};\n}\n\nexport function to_world(transform: Canvas_transform, point: Canvas_point): Canvas_point {\n\treturn {\n\t\tx: (point.x - transform.x) / transform.scale,\n\t\ty: (point.y - transform.y) / transform.scale,\n\t};\n}\n\nfunction clamp_scale(value: number, min: number, max: number): number {\n\tif (value < min) {\n\t\treturn min;\n\t}\n\tif (value > max) {\n\t\treturn max;\n\t}\n\treturn value;\n}\n","import {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n\ttype CSSProperties,\n\ttype PointerEvent as React_pointer_event,\n\ttype ReactNode,\n\ttype WheelEvent as React_wheel_event,\n} from 'react';\nimport type { Edge, Graph, Node, Port } from '../core/types.js';\nimport {\n\tDEFAULT_TRANSFORM,\n\tDEFAULT_ZOOM_OPTIONS,\n\ttype Canvas_point,\n\ttype Canvas_transform,\n\ttype Zoom_options,\n\tpan_by,\n\tto_screen,\n\tto_world,\n\tzoom_at,\n} from './transform.js';\n\nexport interface Node_render_input {\n\tnode: Node;\n\ttransform: Canvas_transform;\n\tworld: Canvas_point;\n\tscreen: Canvas_point;\n}\n\nexport interface Edge_endpoint_render_input {\n\tnode?: Node;\n\tport?: Port;\n\tworld: Canvas_point | null;\n\tscreen: Canvas_point | null;\n}\n\nexport interface Edge_render_input {\n\tedge: Edge;\n\tfrom: Edge_endpoint_render_input;\n\tto: Edge_endpoint_render_input;\n\ttransform: Canvas_transform;\n}\n\nexport interface Graph_canvas_props {\n\tgraph: Graph;\n\trender_node: (input: Node_render_input) => ReactNode;\n\trender_edge?: (input: Edge_render_input) => ReactNode;\n\tclass_name?: string;\n\tstyle?: CSSProperties;\n\tbackground?: ReactNode;\n\tshow_grid?: boolean;\n\tinitial_transform?: Canvas_transform;\n\tmin_scale?: number;\n\tmax_scale?: number;\n\tzoom_sensitivity?: number;\n\ton_transform_change?: (transform: Canvas_transform) => void;\n}\n\ninterface Canvas_context_value {\n\ttransform: Canvas_transform;\n\tto_screen: (point: Canvas_point) => Canvas_point;\n\tto_world: (point: Canvas_point) => Canvas_point;\n}\n\ninterface Pan_state {\n\tpointer_id: number;\n\torigin_client: Canvas_point;\n\tstart_transform: Canvas_transform;\n}\n\nexport const Canvas_context = createContext<Canvas_context_value | null>(null);\n\nexport function use_canvas(): Canvas_context_value {\n\tconst value = useContext(Canvas_context);\n\tif (!value) {\n\t\tthrow new Error('use_canvas must be used within a Graph_canvas');\n\t}\n\treturn value;\n}\n\nexport function Graph_canvas(props: Graph_canvas_props) {\n\tconst {\n\t\tgraph,\n\t\trender_node,\n\t\trender_edge,\n\t\tclass_name,\n\t\tstyle,\n\t\tbackground,\n\t\tshow_grid = true,\n\t\tinitial_transform,\n\t\tmin_scale = DEFAULT_ZOOM_OPTIONS.min_scale,\n\t\tmax_scale = DEFAULT_ZOOM_OPTIONS.max_scale,\n\t\tzoom_sensitivity = DEFAULT_ZOOM_OPTIONS.zoom_sensitivity,\n\t\ton_transform_change,\n\t} = props;\n\tconst container_ref = useRef<HTMLDivElement | null>(null);\n\tconst pan_state_ref = useRef<Pan_state | null>(null);\n\tconst zoom_options = useMemo<Zoom_options>(() => ({\n\t\tmin_scale,\n\t\tmax_scale,\n\t\tzoom_sensitivity,\n\t}), [min_scale, max_scale, zoom_sensitivity]);\n\tconst [transform, set_transform] = useState<Canvas_transform>(\n\t\tinitial_transform ?? DEFAULT_TRANSFORM,\n\t);\n\tuseEffect(() => {\n\t\tif (!initial_transform) {\n\t\t\treturn;\n\t\t}\n\t\tset_transform(initial_transform);\n\t}, [initial_transform]);\n\tconst set_transform_with_callback = useCallback(\n\t\t(update: Canvas_transform | ((previous: Canvas_transform) => Canvas_transform)) => {\n\t\t\tset_transform(previous => {\n\t\t\t\tconst next = typeof update === 'function' ? update(previous) : update;\n\t\t\t\tif (\n\t\t\t\t\ton_transform_change &&\n\t\t\t\t\t(next.x !== previous.x || next.y !== previous.y || next.scale !== previous.scale)\n\t\t\t\t) {\n\t\t\t\t\ton_transform_change(next);\n\t\t\t\t}\n\t\t\t\treturn next;\n\t\t\t});\n\t\t},\n\t\t[on_transform_change],\n\t);\n\tconst handle_pointer_down = useCallback(\n\t\t(event: React_pointer_event<HTMLDivElement>) => {\n\t\t\tif (event.button !== 0 && event.button !== 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tconst pointer_state: Pan_state = {\n\t\t\t\tpointer_id: event.pointerId,\n\t\t\t\torigin_client: { x: event.clientX, y: event.clientY },\n\t\t\t\tstart_transform: transform,\n\t\t\t};\n\t\t\tpan_state_ref.current = pointer_state;\n\t\t\tevent.currentTarget.setPointerCapture(event.pointerId);\n\t\t},\n\t\t[transform],\n\t);\n\tconst handle_pointer_move = useCallback(\n\t\t(event: React_pointer_event<HTMLDivElement>) => {\n\t\t\tconst pointer_state = pan_state_ref.current;\n\t\t\tif (!pointer_state || pointer_state.pointer_id !== event.pointerId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevent.preventDefault();\n\t\t\tconst dx = event.clientX - pointer_state.origin_client.x;\n\t\t\tconst dy = event.clientY - pointer_state.origin_client.y;\n\t\t\tconst next_transform = pan_by(pointer_state.start_transform, dx, dy);\n\t\t\tset_transform_with_callback(next_transform);\n\t\t},\n\t\t[set_transform_with_callback],\n\t);\n\tconst clear_pan_state = useCallback(() => {\n\t\tpan_state_ref.current = null;\n\t}, []);\n\tconst handle_pointer_up = useCallback(\n\t\t(event: React_pointer_event<HTMLDivElement>) => {\n\t\t\tconst pointer_state = pan_state_ref.current;\n\t\t\tif (!pointer_state || pointer_state.pointer_id !== event.pointerId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.currentTarget.hasPointerCapture(event.pointerId)) {\n\t\t\t\tevent.currentTarget.releasePointerCapture(event.pointerId);\n\t\t\t}\n\t\t\tclear_pan_state();\n\t\t},\n\t\t[clear_pan_state],\n\t);\n\tconst handle_pointer_cancel = useCallback(\n\t\t(event: React_pointer_event<HTMLDivElement>) => {\n\t\t\tif (event.currentTarget.hasPointerCapture(event.pointerId)) {\n\t\t\t\tevent.currentTarget.releasePointerCapture(event.pointerId);\n\t\t\t}\n\t\t\tclear_pan_state();\n\t\t},\n\t\t[clear_pan_state],\n\t);\n\tconst handle_wheel = useCallback(\n\t\t(event: React_wheel_event<HTMLDivElement>) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst container = container_ref.current;\n\t\t\tif (!container) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst bounds = container.getBoundingClientRect();\n\t\t\tconst point: Canvas_point = {\n\t\t\t\tx: event.clientX - bounds.left,\n\t\t\t\ty: event.clientY - bounds.top,\n\t\t\t};\n\t\t\tset_transform_with_callback(previous => zoom_at(previous, point, event.deltaY, zoom_options));\n\t\t},\n\t\t[zoom_options, set_transform_with_callback],\n\t);\n\tconst nodes = useMemo(() => Array.from(graph.nodes.values()), [graph]);\n\tconst edges = useMemo(() => Array.from(graph.edges.values()), [graph]);\n\tconst node_elements = nodes.map(node => {\n\t\tconst world: Canvas_point = { x: node.x, y: node.y };\n\t\tconst screen = to_screen(transform, world);\n\t\treturn (\n\t\t\t<div\n\t\t\t\tkey={node.id}\n\t\t\t\tdata-node-id={node.id}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tleft: node.x,\n\t\t\t\t\ttop: node.y,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{render_node({ node, transform, world, screen })}\n\t\t\t</div>\n\t\t);\n\t});\n\tconst edge_elements = render_edge\n\t\t? (\n\t\t\t<svg\n\t\t\t\tclassName=\"nova-node-edge-layer\"\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\theight: '100%',\n\t\t\t\t\tpointerEvents: 'none',\n\t\t\t\t\toverflow: 'visible',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{edges.map(edge => {\n\t\t\t\t\tconst from_node = graph.nodes.get(edge.from.node_id);\n\t\t\t\t\tconst to_node = graph.nodes.get(edge.to.node_id);\n\t\t\t\t\tconst from_port = from_node?.ports.find(port => port.id === edge.from.port_id) ?? null;\n\t\t\t\t\tconst to_port = to_node?.ports.find(port => port.id === edge.to.port_id) ?? null;\n\t\t\t\t\tconst from_world = from_node ? { x: from_node.x, y: from_node.y } : null;\n\t\t\t\t\tconst to_world = to_node ? { x: to_node.x, y: to_node.y } : null;\n\t\t\t\t\tconst from_screen = from_world ? to_screen(transform, from_world) : null;\n\t\t\t\t\tconst to_screen_point = to_world ? to_screen(transform, to_world) : null;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g key={edge.id} data-edge-id={edge.id}>\n\t\t\t\t\t\t\t{render_edge({\n\t\t\t\t\t\t\t\tedge,\n\t\t\t\t\t\t\t\tfrom: {\n\t\t\t\t\t\t\t\t\tnode: from_node ?? undefined,\n\t\t\t\t\t\t\t\t\tport: from_port ?? undefined,\n\t\t\t\t\t\t\t\t\tworld: from_world,\n\t\t\t\t\t\t\t\t\tscreen: from_screen,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tto: {\n\t\t\t\t\t\t\t\t\tnode: to_node ?? undefined,\n\t\t\t\t\t\t\t\t\tport: to_port ?? undefined,\n\t\t\t\t\t\t\t\t\tworld: to_world,\n\t\t\t\t\t\t\t\t\tscreen: to_screen_point,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttransform,\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</svg>\n\t\t)\n\t\t: null;\n\tconst context_value = useMemo<Canvas_context_value>(\n\t\t() => ({\n\t\t\ttransform,\n\t\t\tto_screen: point => to_screen(transform, point),\n\t\t\tto_world: point => to_world(transform, point),\n\t\t}),\n\t\t[transform],\n\t);\n\treturn (\n\t\t<Canvas_context.Provider value={context_value}>\n\t\t\t<div\n\t\t\t\tref={container_ref}\n\t\t\t\tclassName={class_name}\n\t\t\t\tonPointerDown={handle_pointer_down}\n\t\t\t\tonPointerMove={handle_pointer_move}\n\t\t\t\tonPointerUp={handle_pointer_up}\n\t\t\t\tonPointerCancel={handle_pointer_cancel}\n\t\t\t\tonWheel={handle_wheel}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\ttouchAction: 'none',\n\t\t\t\t\tuserSelect: 'none',\n\t\t\t\t\t...style,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{background}\n\t\t\t\t{show_grid ? <Canvas_grid transform={transform} /> : null}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"nova-node-canvas\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\ttransform: `translate3d(${transform.x}px, ${transform.y}px, 0) scale(${transform.scale})`,\n\t\t\t\t\t\ttransformOrigin: '0 0',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{edge_elements}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"nova-node-canvas-nodes\"\n\t\t\t\t\t\tstyle={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{node_elements}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Canvas_context.Provider>\n\t);\n}\n\nexport interface Canvas_grid_props {\n\ttransform: Canvas_transform;\n\tsize?: number;\n\tmajor_every?: number;\n\tminor_color?: string;\n\tmajor_color?: string;\n\tstyle?: CSSProperties;\n}\n\nexport function Canvas_grid(props: Canvas_grid_props) {\n\tconst {\n\t\ttransform,\n\t\tsize = 24,\n\t\tmajor_every = 4,\n\t\tminor_color = 'rgba(255, 255, 255, 0.06)',\n\t\tmajor_color = 'rgba(255, 255, 255, 0.12)',\n\t\tstyle,\n\t} = props;\n\tconst safe_scale = Math.max(transform.scale, Number.EPSILON);\n\tconst minor_step = size * safe_scale;\n\tconst major_step = minor_step * major_every;\n\tconst minor_position = compute_background_position(transform, size);\n\tconst major_position = compute_background_position(transform, size * major_every);\n\tconst background_position = [minor_position, minor_position, major_position, major_position].join(', ');\n\tconst background_size = [\n\t\t`${minor_step}px ${minor_step}px`,\n\t\t`${minor_step}px ${minor_step}px`,\n\t\t`${major_step}px ${major_step}px`,\n\t\t`${major_step}px ${major_step}px`,\n\t].join(', ');\n\treturn (\n\t\t<div\n\t\t\taria-hidden=\"true\"\n\t\t\tclassName=\"nova-node-canvas-grid\"\n\t\t\tstyle={{\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\tbottom: 0,\n\t\t\t\tbackgroundImage: `linear-gradient(${minor_color} 1px, transparent 1px), linear-gradient(90deg, ${minor_color} 1px, transparent 1px), linear-gradient(${major_color} 1px, transparent 1px), linear-gradient(90deg, ${major_color} 1px, transparent 1px)`,\n\t\t\t\tbackgroundSize: background_size,\n\t\t\t\tbackgroundPosition: background_position,\n\t\t\t\tpointerEvents: 'none',\n\t\t\t\t...style,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nfunction compute_background_position(transform: Canvas_transform, world_step: number): string {\n\tconst world_origin = to_world(transform, { x: 0, y: 0 });\n\tconst offset_x = wrap_modulo(world_origin.x, world_step);\n\tconst offset_y = wrap_modulo(world_origin.y, world_step);\n\tconst screen_offset_x = -offset_x * transform.scale;\n\tconst screen_offset_y = -offset_y * transform.scale;\n\treturn `${screen_offset_x}px ${screen_offset_y}px`;\n}\n\nfunction wrap_modulo(value: number, step: number): number {\n\tconst remainder = value % step;\n\treturn remainder < 0 ? remainder + step : remainder;\n}\n"]}
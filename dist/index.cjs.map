{"version":3,"sources":["../src/core/id.ts","../src/core/graph.ts","../src/core/serialize.ts","../src/core/history.ts","../src/core/selection.ts"],"names":["nodes","edges"],"mappings":";;;AAAA,IAAM,QAAA,uBAAe,GAAA,EAAoB;AAElC,SAAS,MAAA,CAAO,SAAS,IAAA,EAAc;AAC7C,EAAA,MAAM,OAAA,GAAA,CAAW,QAAA,CAAS,GAAA,CAAI,MAAM,KAAK,CAAA,IAAK,CAAA;AAC9C,EAAA,QAAA,CAAS,GAAA,CAAI,QAAQ,OAAO,CAAA;AAC5B,EAAA,OAAO,GAAG,MAAM,CAAA,CAAA,EAAI,OAAA,CAAQ,QAAA,CAAS,EAAE,CAAC,CAAA,CAAA;AACzC;AAEO,SAAS,OAAA,CAAQ,SAAS,IAAA,EAAc;AAC9C,EAAA,MAAM,OAAA,GAAA,CAAW,QAAA,CAAS,GAAA,CAAI,MAAM,KAAK,CAAA,IAAK,CAAA;AAC9C,EAAA,OAAO,GAAG,MAAM,CAAA,CAAA,EAAI,OAAA,CAAQ,QAAA,CAAS,EAAE,CAAC,CAAA,CAAA;AACzC;AAEO,SAAS,UAAU,IAAA,EAAqC;AAC9D,EAAA,QAAA,CAAS,KAAA,EAAM;AACf,EAAA,IAAI,CAAC,IAAA,EAAM;AACV,IAAA;AAAA,EACD;AACA,EAAA,KAAA,MAAW,CAAC,MAAA,EAAQ,KAAK,KAAK,MAAA,CAAO,OAAA,CAAQ,IAAI,CAAA,EAAG;AACnD,IAAA,QAAA,CAAS,GAAA,CAAI,QAAQ,KAAK,CAAA;AAAA,EAC3B;AACD;AAEO,SAAS,UAAU,IAAA,EAAoC;AAC7D,EAAA,KAAA,MAAW,CAAC,MAAA,EAAQ,KAAK,KAAK,MAAA,CAAO,OAAA,CAAQ,IAAI,CAAA,EAAG;AACnD,IAAA,MAAM,OAAA,GAAU,QAAA,CAAS,GAAA,CAAI,MAAM,CAAA,IAAK,CAAA;AACxC,IAAA,IAAI,QAAQ,OAAA,EAAS;AACpB,MAAA,QAAA,CAAS,GAAA,CAAI,QAAQ,KAAK,CAAA;AAAA,IAC3B;AAAA,EACD;AACD;;;ACZO,SAAS,YAAA,GAAsB;AACrC,EAAA,OAAO;AAAA,IACN,KAAA,sBAAW,GAAA,EAAI;AAAA,IACf,KAAA,sBAAW,GAAA;AAAI,GAChB;AACD;AAEO,SAAS,YAAY,KAAA,EAAqB;AAChD,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,IAAI,GAAA,CAAI,KAAA,CAAM,KAAK,CAAA;AAAA,IAC1B,KAAA,EAAO,IAAI,GAAA,CAAI,KAAA,CAAM,KAAK;AAAA,GAC3B;AACD;AAEO,SAAS,QAAA,CAAS,OAAc,IAAA,EAAmB;AACzD,EAAA,IAAI,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,IAAA,CAAK,EAAE,CAAA,EAAG;AAC7B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,cAAA,EAAiB,IAAA,CAAK,EAAE,CAAA,gBAAA,CAAkB,CAAA;AAAA,EAC3D;AACA,EAAA,MAAM,UAAA,GAAa,eAAe,IAAI,CAAA;AACtC,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,UAAA,CAAW,EAAA,EAAI,UAAU,CAAA;AACxC,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,WAAA,CAAY,OAAc,IAAA,EAAmB;AAC5D,EAAA,IAAI,CAAC,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,IAAA,CAAK,EAAE,CAAA,EAAG;AAC9B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,cAAA,EAAiB,IAAA,CAAK,EAAE,CAAA,gBAAA,CAAkB,CAAA;AAAA,EAC3D;AACA,EAAA,MAAM,UAAA,GAAa,eAAe,IAAI,CAAA;AACtC,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,UAAA,CAAW,EAAA,EAAI,UAAU,CAAA;AACxC,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,WAAA,CAAY,OAAc,OAAA,EAAyB;AAClE,EAAA,IAAI,CAAC,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AAC9B,IAAA,OAAO,KAAA;AAAA,EACR;AACA,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,KAAA,CAAM,OAAO,OAAO,CAAA;AACzB,EAAA,KAAA,MAAW,CAAC,OAAA,EAAS,IAAI,CAAA,IAAK,KAAK,KAAA,EAAO;AACzC,IAAA,IAAI,KAAK,IAAA,CAAK,OAAA,KAAY,WAAW,IAAA,CAAK,EAAA,CAAG,YAAY,OAAA,EAAS;AACjE,MAAA,IAAA,CAAK,KAAA,CAAM,OAAO,OAAO,CAAA;AAAA,IAC1B;AAAA,EACD;AACA,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,UAAA,CAAW,KAAA,EAAc,QAAA,EAAqB,EAAA,EAAY,EAAA,EAAmB;AAC5F,EAAA,IAAI,CAAC,EAAA,IAAM,CAAC,EAAA,EAAI;AACf,IAAA,OAAO,KAAA;AAAA,EACR;AACA,EAAA,IAAI,OAAA,GAAU,KAAA;AACd,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,KAAA,MAAW,WAAW,QAAA,EAAU;AAC/B,IAAA,MAAM,QAAA,GAAW,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA;AACvC,IAAA,IAAI,CAAC,QAAA,EAAU;AACd,MAAA;AAAA,IACD;AACA,IAAA,OAAA,GAAU,IAAA;AACV,IAAA,IAAA,CAAK,KAAA,CAAM,IAAI,OAAA,EAAS;AAAA,MACvB,GAAG,QAAA;AAAA,MACH,CAAA,EAAG,SAAS,CAAA,GAAI,EAAA;AAAA,MAChB,CAAA,EAAG,SAAS,CAAA,GAAI;AAAA,KAChB,CAAA;AAAA,EACF;AACA,EAAA,OAAO,UAAU,IAAA,GAAO,KAAA;AACzB;AAEO,SAAS,iBAAA,CAAkB,KAAA,EAAc,OAAA,EAAkB,CAAA,EAAW,CAAA,EAAkB;AAC9F,EAAA,MAAM,QAAA,GAAW,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA;AACxC,EAAA,IAAI,CAAC,QAAA,EAAU;AACd,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,cAAA,EAAiB,OAAO,CAAA,gBAAA,CAAkB,CAAA;AAAA,EAC3D;AACA,EAAA,IAAI,QAAA,CAAS,CAAA,KAAM,CAAA,IAAK,QAAA,CAAS,MAAM,CAAA,EAAG;AACzC,IAAA,OAAO,KAAA;AAAA,EACR;AACA,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,KAAA,CAAM,IAAI,OAAA,EAAS;AAAA,IACvB,GAAG,QAAA;AAAA,IACH,CAAA;AAAA,IACA;AAAA,GACA,CAAA;AACD,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,OAAA,CAAQ,OAAc,KAAA,EAA6B;AAClE,EAAA,MAAM,EAAE,IAAA,EAAM,EAAA,EAAG,GAAI,KAAA;AACrB,EAAA,MAAM,SAAA,GAAY,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,KAAK,OAAO,CAAA;AAC9C,EAAA,MAAM,OAAA,GAAU,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,GAAG,OAAO,CAAA;AAC1C,EAAA,IAAI,CAAC,SAAA,EAAW;AACf,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kCAAA,EAAqC,IAAA,CAAK,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EACrE;AACA,EAAA,IAAI,CAAC,OAAA,EAAS;AACb,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,gCAAA,EAAmC,EAAA,CAAG,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EACjE;AACA,EAAA,MAAM,SAAA,GAAY,SAAA,CAAU,SAAA,EAAW,IAAA,CAAK,OAAO,CAAA;AACnD,EAAA,MAAM,OAAA,GAAU,SAAA,CAAU,OAAA,EAAS,EAAA,CAAG,OAAO,CAAA;AAC7C,EAAA,IAAI,CAAC,SAAA,EAAW;AACf,IAAA,MAAM,IAAI,MAAM,CAAA,MAAA,EAAS,IAAA,CAAK,OAAO,CAAA,qBAAA,EAAwB,IAAA,CAAK,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EAC7E;AACA,EAAA,IAAI,CAAC,OAAA,EAAS;AACb,IAAA,MAAM,IAAI,MAAM,CAAA,MAAA,EAAS,EAAA,CAAG,OAAO,CAAA,qBAAA,EAAwB,EAAA,CAAG,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EACzE;AACA,EAAA,IAAI,SAAA,CAAU,SAAS,IAAA,EAAM;AAC5B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,mCAAA,EAAsC,IAAA,CAAK,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EACtE;AACA,EAAA,IAAI,OAAA,CAAQ,SAAS,KAAA,EAAO;AAC3B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,kCAAA,EAAqC,EAAA,CAAG,OAAO,CAAA,CAAA,CAAG,CAAA;AAAA,EACnE;AACA,EAAA,MAAM,OAAA,GAAU,KAAA,CAAM,EAAA,IAAM,MAAA,CAAO,GAAG,CAAA;AACtC,EAAA,IAAI,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AAC7B,IAAA,MAAM,IAAI,KAAA,CAAM,CAAA,cAAA,EAAiB,OAAO,CAAA,gBAAA,CAAkB,CAAA;AAAA,EAC3D;AACA,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,MAAM,IAAA,GAAa;AAAA,IAClB,EAAA,EAAI,OAAA;AAAA,IACJ,MAAM,EAAE,OAAA,EAAS,KAAK,OAAA,EAAS,OAAA,EAAS,KAAK,OAAA,EAAQ;AAAA,IACrD,IAAI,EAAE,OAAA,EAAS,GAAG,OAAA,EAAS,OAAA,EAAS,GAAG,OAAA,EAAQ;AAAA,IAC/C,MAAM,KAAA,CAAM;AAAA,GACb;AACA,EAAA,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,IAAA,CAAK,EAAA,EAAI,IAAI,CAAA;AAC5B,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,WAAA,CAAY,OAAc,OAAA,EAAyB;AAClE,EAAA,IAAI,CAAC,KAAA,CAAM,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AAC9B,IAAA,OAAO,KAAA;AAAA,EACR;AACA,EAAA,MAAM,IAAA,GAAO,YAAY,KAAK,CAAA;AAC9B,EAAA,IAAA,CAAK,KAAA,CAAM,OAAO,OAAO,CAAA;AACzB,EAAA,OAAO,IAAA;AACR;AAEO,SAAS,UAAA,CAAW,OAAc,OAAA,EAAyB;AACjE,EAAA,OAAO,WAAA,CAAY,OAAO,OAAO,CAAA;AAClC;AAEA,SAAS,eAAe,IAAA,EAAkB;AACzC,EAAA,MAAM,IAAA,uBAAW,GAAA,EAAa;AAC9B,EAAA,MAAM,QAAQ,IAAA,CAAK,KAAA,CAAM,GAAA,CAAI,CAAC,MAAM,KAAA,KAAU;AAC7C,IAAA,MAAM,KAAK,IAAA,CAAK,EAAA,IAAM,GAAG,IAAA,CAAK,EAAE,SAAS,KAAK,CAAA,CAAA;AAC9C,IAAA,IAAI,IAAA,CAAK,GAAA,CAAI,EAAE,CAAA,EAAG;AACjB,MAAA,MAAM,IAAI,KAAA,CAAM,CAAA,mBAAA,EAAsB,EAAE,CAAA,WAAA,EAAc,IAAA,CAAK,EAAE,CAAA,CAAA,CAAG,CAAA;AAAA,IACjE;AACA,IAAA,IAAA,CAAK,IAAI,EAAE,CAAA;AACX,IAAA,OAAO;AAAA,MACN,GAAG,IAAA;AAAA,MACH,EAAA;AAAA,MACA,SAAS,IAAA,CAAK,EAAA;AAAA,MACd,KAAA,EAAO,KAAK,KAAA,IAAS;AAAA,KACtB;AAAA,EACD,CAAC,CAAA;AACD,EAAA,OAAO;AAAA,IACN,GAAG,IAAA;AAAA,IACH;AAAA,GACD;AACD;AAEA,SAAS,SAAA,CAAU,MAAY,OAAA,EAAoC;AAClE,EAAA,OAAO,KAAK,KAAA,CAAM,IAAA,CAAK,CAAC,IAAA,KAAS,IAAA,CAAK,OAAO,OAAO,CAAA;AACrD;;;AC1KO,SAAS,gBAAgB,KAAA,EAAgC;AAC/D,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,CAAC,GAAG,KAAA,CAAM,MAAM,MAAA,EAAQ,CAAA,CAAE,GAAA,CAAI,UAAU,CAAA;AAAA,IAC/C,KAAA,EAAO,CAAC,GAAG,KAAA,CAAM,MAAM,MAAA,EAAQ,CAAA,CAAE,GAAA,CAAI,UAAU;AAAA,GAChD;AACD;AAEO,SAAS,kBAAkB,UAAA,EAAqC;AACtE,EAAA,MAAM,KAAA,GAAQ,iBAAiB,UAAU,CAAA;AACzC,EAAA,IAAI,MAAA,CAAO,IAAA,CAAK,KAAK,CAAA,CAAE,SAAS,CAAA,EAAG;AAClC,IAAA,SAAA,CAAU,KAAK,CAAA;AAAA,EAChB;AACA,EAAA,IAAI,QAAQ,YAAA,EAAa;AACzB,EAAA,KAAA,MAAW,IAAA,IAAQ,WAAW,KAAA,EAAO;AACpC,IAAA,KAAA,GAAQ,QAAA,CAAS,KAAA,EAAO,UAAA,CAAW,IAAI,CAAC,CAAA;AAAA,EACzC;AACA,EAAA,KAAA,MAAW,IAAA,IAAQ,WAAW,KAAA,EAAO;AACpC,IAAA,KAAA,GAAQ,QAAQ,KAAA,EAAO;AAAA,MACtB,IAAA,EAAM,EAAE,GAAG,IAAA,CAAK,IAAA,EAAK;AAAA,MACrB,EAAA,EAAI,EAAE,GAAG,IAAA,CAAK,EAAA,EAAG;AAAA,MACjB,IAAI,IAAA,CAAK,EAAA;AAAA,MACT,MAAM,IAAA,CAAK;AAAA,KACX,CAAA;AAAA,EACF;AACA,EAAA,OAAO,KAAA;AACR;AAEA,SAAS,WAAW,IAAA,EAAkB;AACrC,EAAA,OAAO;AAAA,IACN,GAAG,IAAA;AAAA,IACH,KAAA,EAAO,KAAK,KAAA,CAAM,GAAA,CAAI,CAAC,IAAA,MAAU,EAAE,GAAG,IAAA,EAAK,CAAE;AAAA,GAC9C;AACD;AAEA,SAAS,WAAW,IAAA,EAAkB;AACrC,EAAA,OAAO;AAAA,IACN,GAAG,IAAA;AAAA,IACH,IAAA,EAAM,EAAE,GAAG,IAAA,CAAK,IAAA,EAAK;AAAA,IACrB,EAAA,EAAI,EAAE,GAAG,IAAA,CAAK,EAAA;AAAG,GAClB;AACD;AAEA,SAAS,iBAAiB,UAAA,EAAsD;AAC/E,EAAA,MAAM,MAAA,uBAAa,GAAA,EAAoB;AACvC,EAAA,KAAA,MAAW,IAAA,IAAQ,WAAW,KAAA,EAAO;AACpC,IAAA,iBAAA,CAAkB,MAAA,EAAQ,KAAK,EAAE,CAAA;AAAA,EAClC;AACA,EAAA,KAAA,MAAW,IAAA,IAAQ,WAAW,KAAA,EAAO;AACpC,IAAA,iBAAA,CAAkB,MAAA,EAAQ,KAAK,EAAE,CAAA;AAAA,EAClC;AACA,EAAA,OAAO,MAAA,CAAO,YAAY,MAAM,CAAA;AACjC;AAEA,SAAS,iBAAA,CAAkB,QAA6B,EAAA,EAA8B;AACrF,EAAA,IAAI,CAAC,EAAA,EAAI;AACR,IAAA;AAAA,EACD;AACA,EAAA,MAAM,SAAA,GAAY,EAAA,CAAG,WAAA,CAAY,GAAG,CAAA;AACpC,EAAA,IAAI,SAAA,KAAc,EAAA,IAAM,SAAA,KAAc,EAAA,CAAG,SAAS,CAAA,EAAG;AACpD,IAAA;AAAA,EACD;AACA,EAAA,MAAM,MAAA,GAAS,EAAA,CAAG,KAAA,CAAM,CAAA,EAAG,SAAS,CAAA;AACpC,EAAA,MAAM,MAAA,GAAS,EAAA,CAAG,KAAA,CAAM,SAAA,GAAY,CAAC,CAAA;AACrC,EAAA,IAAI,CAAC,cAAA,CAAe,IAAA,CAAK,MAAM,CAAA,EAAG;AACjC,IAAA;AAAA,EACD;AACA,EAAA,MAAM,KAAA,GAAQ,QAAA,CAAS,MAAA,EAAQ,EAAE,CAAA;AACjC,EAAA,IAAI,MAAA,CAAO,KAAA,CAAM,KAAK,CAAA,EAAG;AACxB,IAAA;AAAA,EACD;AACA,EAAA,MAAM,OAAA,GAAU,MAAA,CAAO,GAAA,CAAI,MAAM,CAAA,IAAK,CAAA;AACtC,EAAA,IAAI,QAAQ,OAAA,EAAS;AACpB,IAAA,MAAA,CAAO,GAAA,CAAI,QAAQ,KAAK,CAAA;AAAA,EACzB;AACD;;;AC/DO,SAAS,eAAe,aAAA,EAAqC;AACnE,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,aAAA;AAAA,IACP,YAAY,EAAC;AAAA,IACb,YAAY;AAAC,GACd;AACD;AAEO,SAAS,eAAA,CAAmB,SAAwB,OAAA,EAAwC;AAClG,EAAA,MAAM,EAAE,KAAA,EAAO,YAAA,EAAa,GAAI,OAAA;AAChC,EAAA,MAAM,EAAE,KAAA,EAAO,WAAA,EAAa,QAAO,GAAI,OAAA,CAAQ,GAAG,YAAY,CAAA;AAC9D,EAAA,MAAM,UAAU,WAAA,KAAgB,YAAA;AAChC,EAAA,IAAI,CAAC,OAAA,EAAS;AACb,IAAA,OAAO;AAAA,MACN,OAAA,EAAS;AAAA,QACR,KAAA,EAAO,WAAA;AAAA,QACP,YAAY,OAAA,CAAQ,UAAA;AAAA,QACpB,YAAY,OAAA,CAAQ;AAAA,OACrB;AAAA,MACA;AAAA,KACD;AAAA,EACD;AACA,EAAA,MAAM,KAAA,GAA0B;AAAA,IAC/B,OAAA;AAAA,IACA,YAAA;AAAA,IACA,WAAA;AAAA,IACA;AAAA,GACD;AACA,EAAA,OAAO;AAAA,IACN,OAAA,EAAS;AAAA,MACR,KAAA,EAAO,WAAA;AAAA,MACP,UAAA,EAAY,CAAC,GAAG,OAAA,CAAQ,YAAY,KAAK,CAAA;AAAA,MACzC,YAAY;AAAC,KACd;AAAA,IACA;AAAA,GACD;AACD;AAEO,SAAS,KAAK,OAAA,EAAuC;AAC3D,EAAA,IAAI,CAAC,OAAA,CAAQ,UAAA,CAAW,MAAA,EAAQ;AAC/B,IAAA,OAAO,OAAA;AAAA,EACR;AACA,EAAA,MAAM,eAAA,GAAkB,OAAA,CAAQ,UAAA,CAAW,KAAA,CAAM,GAAG,EAAE,CAAA;AACtD,EAAA,MAAM,QAAQ,OAAA,CAAQ,UAAA,CAAW,OAAA,CAAQ,UAAA,CAAW,SAAS,CAAC,CAAA;AAC9D,EAAA,MAAM,cAAA,GAAiB,KAAA,CAAM,OAAA,CAAQ,IAAA,GAAO,KAAA,CAAM,QAAQ,IAAA,CAAK,OAAA,CAAQ,KAAK,CAAA,GAAI,KAAA,CAAM,YAAA;AACtF,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,cAAA;AAAA,IACP,UAAA,EAAY,eAAA;AAAA,IACZ,UAAA,EAAY,CAAC,GAAG,OAAA,CAAQ,YAAY,KAAK;AAAA,GAC1C;AACD;AAEO,SAAS,KAAK,OAAA,EAAuC;AAC3D,EAAA,IAAI,CAAC,OAAA,CAAQ,UAAA,CAAW,MAAA,EAAQ;AAC/B,IAAA,OAAO,OAAA;AAAA,EACR;AACA,EAAA,MAAM,eAAA,GAAkB,OAAA,CAAQ,UAAA,CAAW,KAAA,CAAM,GAAG,EAAE,CAAA;AACtD,EAAA,MAAM,QAAQ,OAAA,CAAQ,UAAA,CAAW,OAAA,CAAQ,UAAA,CAAW,SAAS,CAAC,CAAA;AAC9D,EAAA,OAAO;AAAA,IACN,OAAO,KAAA,CAAM,WAAA;AAAA,IACb,UAAA,EAAY,CAAC,GAAG,OAAA,CAAQ,YAAY,KAAK,CAAA;AAAA,IACzC,UAAA,EAAY;AAAA,GACb;AACD;AAEO,SAAS,aAAA,CAAc,SAAwB,KAAA,EAA6B;AAClF,EAAA,OAAO;AAAA,IACN,KAAA;AAAA,IACA,YAAY,EAAC;AAAA,IACb,YAAY;AAAC,GACd;AACD;AAEO,SAAS,SAAS,OAAA,EAAiC;AACzD,EAAA,OAAO,OAAA,CAAQ,WAAW,MAAA,GAAS,CAAA;AACpC;AAEO,SAAS,SAAS,OAAA,EAAiC;AACzD,EAAA,OAAO,OAAA,CAAQ,WAAW,MAAA,GAAS,CAAA;AACpC;;;ACtFO,SAAS,gBAAA,GAAoC;AACnD,EAAA,OAAO;AAAA,IACN,KAAA,sBAAW,GAAA,EAAI;AAAA,IACf,KAAA,sBAAW,GAAA;AAAI,GAChB;AACD;AAEO,SAAS,gBAAgB,SAAA,EAA6C;AAC5E,EAAA,IAAI,CAAC,SAAA,CAAU,KAAA,CAAM,QAAQ,CAAC,SAAA,CAAU,MAAM,IAAA,EAAM;AACnD,IAAA,OAAO,SAAA;AAAA,EACR;AACA,EAAA,OAAO,gBAAA,EAAiB;AACzB;AAEO,SAAS,gBAAA,CAAiB,WAA4B,OAAA,EAA2B;AACvF,EAAA,OAAO,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA;AACnC;AAEO,SAAS,gBAAA,CAAiB,WAA4B,OAAA,EAA2B;AACvF,EAAA,OAAO,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA;AACnC;AAEO,SAAS,WAAA,CAAY,SAAA,EAA4B,OAAA,EAAkB,OAAA,GAA0B,EAAC,EAAoB;AACxH,EAAA,MAAM,MAAA,GAAS,QAAQ,MAAA,IAAU,KAAA;AACjC,EAAA,IAAI,MAAA,EAAQ;AACX,IAAA,IAAI,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AACjC,MAAA,OAAO,SAAA;AAAA,IACR;AACA,IAAA,MAAMA,MAAAA,GAAQ,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AACrC,IAAAA,MAAAA,CAAM,IAAI,OAAO,CAAA;AACjB,IAAA,OAAO;AAAA,MACN,KAAA,EAAAA,MAAAA;AAAA,MACA,KAAA,EAAO,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK;AAAA,KAC/B;AAAA,EACD;AACA,EAAA,MAAM,iBAAA,GAAoB,UAAU,KAAA,CAAM,IAAA,KAAS,KAAK,SAAA,CAAU,KAAA,CAAM,IAAI,OAAO,CAAA;AACnF,EAAA,IAAI,iBAAA,IAAqB,CAAC,SAAA,CAAU,KAAA,CAAM,IAAA,EAAM;AAC/C,IAAA,OAAO,SAAA;AAAA,EACR;AACA,EAAA,MAAM,KAAA,uBAAY,GAAA,EAAa;AAC/B,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AACjB,EAAA,OAAO;AAAA,IACN,KAAA;AAAA,IACA,KAAA,sBAAW,GAAA;AAAa,GACzB;AACD;AAEO,SAAS,WAAA,CAAY,SAAA,EAA4B,OAAA,EAAkB,OAAA,GAA0B,EAAC,EAAoB;AACxH,EAAA,MAAM,MAAA,GAAS,QAAQ,MAAA,IAAU,KAAA;AACjC,EAAA,IAAI,MAAA,EAAQ;AACX,IAAA,IAAI,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AACjC,MAAA,OAAO,SAAA;AAAA,IACR;AACA,IAAA,MAAMC,MAAAA,GAAQ,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AACrC,IAAAA,MAAAA,CAAM,IAAI,OAAO,CAAA;AACjB,IAAA,OAAO;AAAA,MACN,KAAA,EAAO,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AAAA,MAC9B,KAAA,EAAAA;AAAA,KACD;AAAA,EACD;AACA,EAAA,MAAM,iBAAA,GAAoB,UAAU,KAAA,CAAM,IAAA,KAAS,KAAK,SAAA,CAAU,KAAA,CAAM,IAAI,OAAO,CAAA;AACnF,EAAA,IAAI,iBAAA,IAAqB,CAAC,SAAA,CAAU,KAAA,CAAM,IAAA,EAAM;AAC/C,IAAA,OAAO,SAAA;AAAA,EACR;AACA,EAAA,MAAM,KAAA,uBAAY,GAAA,EAAa;AAC/B,EAAA,KAAA,CAAM,IAAI,OAAO,CAAA;AACjB,EAAA,OAAO;AAAA,IACN,KAAA,sBAAW,GAAA,EAAa;AAAA,IACxB;AAAA,GACD;AACD;AAEO,SAAS,aAAA,CAAc,WAA4B,OAAA,EAAmC;AAC5F,EAAA,IAAI,CAAC,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AAClC,IAAA,OAAO,SAAA;AAAA,EACR;AACA,EAAA,MAAM,KAAA,GAAQ,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AACrC,EAAA,KAAA,CAAM,OAAO,OAAO,CAAA;AACpB,EAAA,IAAI,CAAC,KAAA,CAAM,IAAA,IAAQ,CAAC,SAAA,CAAU,MAAM,IAAA,EAAM;AACzC,IAAA,OAAO,gBAAA,EAAiB;AAAA,EACzB;AACA,EAAA,OAAO;AAAA,IACN,KAAA;AAAA,IACA,KAAA,EAAO,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK;AAAA,GAC/B;AACD;AAEO,SAAS,aAAA,CAAc,WAA4B,OAAA,EAAmC;AAC5F,EAAA,IAAI,CAAC,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,CAAA,EAAG;AAClC,IAAA,OAAO,SAAA;AAAA,EACR;AACA,EAAA,MAAM,KAAA,GAAQ,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AACrC,EAAA,KAAA,CAAM,OAAO,OAAO,CAAA;AACpB,EAAA,IAAI,CAAC,KAAA,CAAM,IAAA,IAAQ,CAAC,SAAA,CAAU,MAAM,IAAA,EAAM;AACzC,IAAA,OAAO,gBAAA,EAAiB;AAAA,EACzB;AACA,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,IAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAA;AAAA,IAC9B;AAAA,GACD;AACD;AAEO,SAAS,WAAA,CAAY,WAA4B,OAAA,EAAmC;AAC1F,EAAA,OAAO,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,IAC/B,aAAA,CAAc,SAAA,EAAW,OAAO,CAAA,GAChC,YAAY,SAAA,EAAW,OAAA,EAAS,EAAE,MAAA,EAAQ,MAAM,CAAA;AACpD;AAEO,SAAS,WAAA,CAAY,WAA4B,OAAA,EAAmC;AAC1F,EAAA,OAAO,SAAA,CAAU,KAAA,CAAM,GAAA,CAAI,OAAO,IAC/B,aAAA,CAAc,SAAA,EAAW,OAAO,CAAA,GAChC,YAAY,SAAA,EAAW,OAAA,EAAS,EAAE,MAAA,EAAQ,MAAM,CAAA;AACpD;AAEO,SAAS,oBAAoB,SAAA,EAAoE;AACvG,EAAA,OAAO;AAAA,IACN,KAAA,EAAO,CAAC,GAAG,SAAA,CAAU,KAAK,CAAA;AAAA,IAC1B,KAAA,EAAO,CAAC,GAAG,SAAA,CAAU,KAAK;AAAA,GAC3B;AACD","file":"index.cjs","sourcesContent":["const counters = new Map<string, number>();\n\nexport function gen_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\tcounters.set(prefix, counter);\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function peek_id(prefix = 'id'): string {\n\tconst counter = (counters.get(prefix) ?? 0) + 1;\n\treturn `${prefix}_${counter.toString(36)}`;\n}\n\nexport function reset_ids(seed?: Record<string, number>): void {\n\tcounters.clear();\n\tif (!seed) {\n\t\treturn;\n\t}\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tcounters.set(prefix, value);\n\t}\n}\n\nexport function prime_ids(seed: Record<string, number>): void {\n\tfor (const [prefix, value] of Object.entries(seed)) {\n\t\tconst current = counters.get(prefix) ?? 0;\n\t\tif (value > current) {\n\t\t\tcounters.set(prefix, value);\n\t\t}\n\t}\n}\n","import { gen_id } from './id.js';\nimport type {\n\tEdge,\n\tEdge_id,\n\tGraph,\n\tNode,\n\tNode_id,\n\tPort,\n\tPort_id,\n} from './types.js';\n\nexport interface Connect_input {\n\tfrom: { node_id: Node_id; port_id: Port_id };\n\tto: { node_id: Node_id; port_id: Port_id };\n\tid?: Edge_id;\n\tdata?: Edge['data'];\n}\n\nexport function create_graph(): Graph {\n\treturn {\n\t\tnodes: new Map(),\n\t\tedges: new Map(),\n\t};\n}\n\nexport function clone_graph(graph: Graph): Graph {\n\treturn {\n\t\tnodes: new Map(graph.nodes),\n\t\tedges: new Map(graph.edges),\n\t};\n}\n\nexport function add_node(graph: Graph, node: Node): Graph {\n\tif (graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" already exists`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function update_node(graph: Graph, node: Node): Graph {\n\tif (!graph.nodes.has(node.id)) {\n\t\tthrow new Error(`Node with id \"${node.id}\" does not exist`);\n\t}\n\tconst normalized = normalize_node(node);\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(normalized.id, normalized);\n\treturn next;\n}\n\nexport function remove_node(graph: Graph, node_id: Node_id): Graph {\n\tif (!graph.nodes.has(node_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.delete(node_id);\n\tfor (const [edge_id, edge] of next.edges) {\n\t\tif (edge.from.node_id === node_id || edge.to.node_id === node_id) {\n\t\t\tnext.edges.delete(edge_id);\n\t\t}\n\t}\n\treturn next;\n}\n\nexport function move_nodes(graph: Graph, node_ids: Node_id[], dx: number, dy: number): Graph {\n\tif (!dx && !dy) {\n\t\treturn graph;\n\t}\n\tlet mutated = false;\n\tconst next = clone_graph(graph);\n\tfor (const node_id of node_ids) {\n\t\tconst existing = next.nodes.get(node_id);\n\t\tif (!existing) {\n\t\t\tcontinue;\n\t\t}\n\t\tmutated = true;\n\t\tnext.nodes.set(node_id, {\n\t\t\t...existing,\n\t\t\tx: existing.x + dx,\n\t\t\ty: existing.y + dy,\n\t\t});\n\t}\n\treturn mutated ? next : graph;\n}\n\nexport function set_node_position(graph: Graph, node_id: Node_id, x: number, y: number): Graph {\n\tconst existing = graph.nodes.get(node_id);\n\tif (!existing) {\n\t\tthrow new Error(`Node with id \"${node_id}\" does not exist`);\n\t}\n\tif (existing.x === x && existing.y === y) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.nodes.set(node_id, {\n\t\t...existing,\n\t\tx,\n\t\ty,\n\t});\n\treturn next;\n}\n\nexport function connect(graph: Graph, input: Connect_input): Graph {\n\tconst { from, to } = input;\n\tconst from_node = graph.nodes.get(from.node_id);\n\tconst to_node = graph.nodes.get(to.node_id);\n\tif (!from_node) {\n\t\tthrow new Error(`Cannot connect from missing node \"${from.node_id}\"`);\n\t}\n\tif (!to_node) {\n\t\tthrow new Error(`Cannot connect to missing node \"${to.node_id}\"`);\n\t}\n\tconst from_port = find_port(from_node, from.port_id);\n\tconst to_port = find_port(to_node, to.port_id);\n\tif (!from_port) {\n\t\tthrow new Error(`Port \"${from.port_id}\" not found on node \"${from.node_id}\"`);\n\t}\n\tif (!to_port) {\n\t\tthrow new Error(`Port \"${to.port_id}\" not found on node \"${to.node_id}\"`);\n\t}\n\tif (from_port.kind === 'in') {\n\t\tthrow new Error(`Cannot connect from an input port \"${from.port_id}\"`);\n\t}\n\tif (to_port.kind === 'out') {\n\t\tthrow new Error(`Cannot connect to an output port \"${to.port_id}\"`);\n\t}\n\tconst edge_id = input.id ?? gen_id('e');\n\tif (graph.edges.has(edge_id)) {\n\t\tthrow new Error(`Edge with id \"${edge_id}\" already exists`);\n\t}\n\tconst next = clone_graph(graph);\n\tconst edge: Edge = {\n\t\tid: edge_id,\n\t\tfrom: { node_id: from.node_id, port_id: from.port_id },\n\t\tto: { node_id: to.node_id, port_id: to.port_id },\n\t\tdata: input.data,\n\t};\n\tnext.edges.set(edge.id, edge);\n\treturn next;\n}\n\nexport function remove_edge(graph: Graph, edge_id: Edge_id): Graph {\n\tif (!graph.edges.has(edge_id)) {\n\t\treturn graph;\n\t}\n\tconst next = clone_graph(graph);\n\tnext.edges.delete(edge_id);\n\treturn next;\n}\n\nexport function disconnect(graph: Graph, edge_id: Edge_id): Graph {\n\treturn remove_edge(graph, edge_id);\n}\n\nfunction normalize_node(node: Node): Node {\n\tconst seen = new Set<Port_id>();\n\tconst ports = node.ports.map((port, index) => {\n\t\tconst id = port.id ?? `${node.id}_port_${index}`;\n\t\tif (seen.has(id)) {\n\t\t\tthrow new Error(`Duplicate port id \"${id}\" on node \"${node.id}\"`);\n\t\t}\n\t\tseen.add(id);\n\t\treturn {\n\t\t\t...port,\n\t\t\tid,\n\t\t\tnode_id: node.id,\n\t\t\tindex: port.index ?? index,\n\t\t};\n\t});\n\treturn {\n\t\t...node,\n\t\tports,\n\t};\n}\n\nfunction find_port(node: Node, port_id: Port_id): Port | undefined {\n\treturn node.ports.find((port) => port.id === port_id);\n}\n","import type { Edge, Graph, Node } from './types.js';\nimport { add_node, connect, create_graph } from './graph.js';\nimport { prime_ids } from './id.js';\n\nexport interface Serialized_graph {\n\tnodes: Node[];\n\tedges: Edge[];\n}\n\nexport function serialize_graph(graph: Graph): Serialized_graph {\n\treturn {\n\t\tnodes: [...graph.nodes.values()].map(clone_node),\n\t\tedges: [...graph.edges.values()].map(clone_edge),\n\t};\n}\n\nexport function deserialize_graph(serialized: Serialized_graph): Graph {\n\tconst seeds = collect_id_seeds(serialized);\n\tif (Object.keys(seeds).length > 0) {\n\t\tprime_ids(seeds);\n\t}\n\tlet graph = create_graph();\n\tfor (const node of serialized.nodes) {\n\t\tgraph = add_node(graph, clone_node(node));\n\t}\n\tfor (const edge of serialized.edges) {\n\t\tgraph = connect(graph, {\n\t\t\tfrom: { ...edge.from },\n\t\t\tto: { ...edge.to },\n\t\t\tid: edge.id,\n\t\t\tdata: edge.data,\n\t\t});\n\t}\n\treturn graph;\n}\n\nfunction clone_node(node: Node): Node {\n\treturn {\n\t\t...node,\n\t\tports: node.ports.map((port) => ({ ...port })),\n\t};\n}\n\nfunction clone_edge(edge: Edge): Edge {\n\treturn {\n\t\t...edge,\n\t\tfrom: { ...edge.from },\n\t\tto: { ...edge.to },\n\t};\n}\n\nfunction collect_id_seeds(serialized: Serialized_graph): Record<string, number> {\n\tconst maxima = new Map<string, number>();\n\tfor (const node of serialized.nodes) {\n\t\trecord_max_suffix(maxima, node.id);\n\t}\n\tfor (const edge of serialized.edges) {\n\t\trecord_max_suffix(maxima, edge.id);\n\t}\n\treturn Object.fromEntries(maxima);\n}\n\nfunction record_max_suffix(target: Map<string, number>, id: string | undefined): void {\n\tif (!id) {\n\t\treturn;\n\t}\n\tconst separator = id.lastIndexOf('_');\n\tif (separator === -1 || separator === id.length - 1) {\n\t\treturn;\n\t}\n\tconst prefix = id.slice(0, separator);\n\tconst suffix = id.slice(separator + 1);\n\tif (!/^[0-9a-z]+$/i.test(suffix)) {\n\t\treturn;\n\t}\n\tconst value = parseInt(suffix, 36);\n\tif (Number.isNaN(value)) {\n\t\treturn;\n\t}\n\tconst current = target.get(prefix) ?? 0;\n\tif (value > current) {\n\t\ttarget.set(prefix, value);\n\t}\n}\n","import type { Command, Graph } from './types.js';\n\nexport interface Command_entry<R = unknown> {\n\tcommand: Command<R>;\n\tgraph_before: Graph;\n\tgraph_after: Graph;\n\tresult?: R;\n}\n\nexport interface History_state {\n\tgraph: Graph;\n\tundo_stack: Command_entry[];\n\tredo_stack: Command_entry[];\n}\n\nexport interface Execute_result<R = unknown> {\n\thistory: History_state;\n\tresult?: R;\n}\n\nexport function create_history(initial_graph: Graph): History_state {\n\treturn {\n\t\tgraph: initial_graph,\n\t\tundo_stack: [],\n\t\tredo_stack: [],\n\t};\n}\n\nexport function execute_command<R>(history: History_state, command: Command<R>): Execute_result<R> {\n\tconst { graph: graph_before } = history;\n\tconst { graph: graph_after, result } = command.do(graph_before);\n\tconst mutated = graph_after !== graph_before;\n\tif (!mutated) {\n\t\treturn {\n\t\t\thistory: {\n\t\t\t\tgraph: graph_after,\n\t\t\t\tundo_stack: history.undo_stack,\n\t\t\t\tredo_stack: history.redo_stack,\n\t\t\t},\n\t\t\tresult,\n\t\t};\n\t}\n\tconst entry: Command_entry<R> = {\n\t\tcommand,\n\t\tgraph_before,\n\t\tgraph_after,\n\t\tresult,\n\t};\n\treturn {\n\t\thistory: {\n\t\t\tgraph: graph_after,\n\t\t\tundo_stack: [...history.undo_stack, entry],\n\t\t\tredo_stack: [],\n\t\t},\n\t\tresult,\n\t};\n}\n\nexport function undo(history: History_state): History_state {\n\tif (!history.undo_stack.length) {\n\t\treturn history;\n\t}\n\tconst next_undo_stack = history.undo_stack.slice(0, -1);\n\tconst entry = history.undo_stack[history.undo_stack.length - 1];\n\tconst previous_graph = entry.command.undo ? entry.command.undo(history.graph) : entry.graph_before;\n\treturn {\n\t\tgraph: previous_graph,\n\t\tundo_stack: next_undo_stack,\n\t\tredo_stack: [...history.redo_stack, entry],\n\t};\n}\n\nexport function redo(history: History_state): History_state {\n\tif (!history.redo_stack.length) {\n\t\treturn history;\n\t}\n\tconst next_redo_stack = history.redo_stack.slice(0, -1);\n\tconst entry = history.redo_stack[history.redo_stack.length - 1];\n\treturn {\n\t\tgraph: entry.graph_after,\n\t\tundo_stack: [...history.undo_stack, entry],\n\t\tredo_stack: next_redo_stack,\n\t};\n}\n\nexport function clear_history(history: History_state, graph: Graph): History_state {\n\treturn {\n\t\tgraph,\n\t\tundo_stack: [],\n\t\tredo_stack: [],\n\t};\n}\n\nexport function can_undo(history: History_state): boolean {\n\treturn history.undo_stack.length > 0;\n}\n\nexport function can_redo(history: History_state): boolean {\n\treturn history.redo_stack.length > 0;\n}\n","import type { Edge_id, Node_id } from './types.js';\n\nexport type Selection_kind = 'node' | 'edge';\n\nexport interface Selection_state {\n\tnodes: Set<Node_id>;\n\tedges: Set<Edge_id>;\n}\n\nexport interface Select_options {\n\tappend?: boolean;\n}\n\nexport function create_selection(): Selection_state {\n\treturn {\n\t\tnodes: new Set(),\n\t\tedges: new Set(),\n\t};\n}\n\nexport function clear_selection(selection: Selection_state): Selection_state {\n\tif (!selection.nodes.size && !selection.edges.size) {\n\t\treturn selection;\n\t}\n\treturn create_selection();\n}\n\nexport function is_node_selected(selection: Selection_state, node_id: Node_id): boolean {\n\treturn selection.nodes.has(node_id);\n}\n\nexport function is_edge_selected(selection: Selection_state, edge_id: Edge_id): boolean {\n\treturn selection.edges.has(edge_id);\n}\n\nexport function select_node(selection: Selection_state, node_id: Node_id, options: Select_options = {}): Selection_state {\n\tconst append = options.append ?? false;\n\tif (append) {\n\t\tif (selection.nodes.has(node_id)) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst nodes = new Set(selection.nodes);\n\t\tnodes.add(node_id);\n\t\treturn {\n\t\t\tnodes,\n\t\t\tedges: new Set(selection.edges),\n\t\t};\n\t}\n\tconst already_only_node = selection.nodes.size === 1 && selection.nodes.has(node_id);\n\tif (already_only_node && !selection.edges.size) {\n\t\treturn selection;\n\t}\n\tconst nodes = new Set<Node_id>();\n\tnodes.add(node_id);\n\treturn {\n\t\tnodes,\n\t\tedges: new Set<Edge_id>(),\n\t};\n}\n\nexport function select_edge(selection: Selection_state, edge_id: Edge_id, options: Select_options = {}): Selection_state {\n\tconst append = options.append ?? false;\n\tif (append) {\n\t\tif (selection.edges.has(edge_id)) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst edges = new Set(selection.edges);\n\t\tedges.add(edge_id);\n\t\treturn {\n\t\t\tnodes: new Set(selection.nodes),\n\t\t\tedges,\n\t\t};\n\t}\n\tconst already_only_edge = selection.edges.size === 1 && selection.edges.has(edge_id);\n\tif (already_only_edge && !selection.nodes.size) {\n\t\treturn selection;\n\t}\n\tconst edges = new Set<Edge_id>();\n\tedges.add(edge_id);\n\treturn {\n\t\tnodes: new Set<Node_id>(),\n\t\tedges,\n\t};\n}\n\nexport function deselect_node(selection: Selection_state, node_id: Node_id): Selection_state {\n\tif (!selection.nodes.has(node_id)) {\n\t\treturn selection;\n\t}\n\tconst nodes = new Set(selection.nodes);\n\tnodes.delete(node_id);\n\tif (!nodes.size && !selection.edges.size) {\n\t\treturn create_selection();\n\t}\n\treturn {\n\t\tnodes,\n\t\tedges: new Set(selection.edges),\n\t};\n}\n\nexport function deselect_edge(selection: Selection_state, edge_id: Edge_id): Selection_state {\n\tif (!selection.edges.has(edge_id)) {\n\t\treturn selection;\n\t}\n\tconst edges = new Set(selection.edges);\n\tedges.delete(edge_id);\n\tif (!edges.size && !selection.nodes.size) {\n\t\treturn create_selection();\n\t}\n\treturn {\n\t\tnodes: new Set(selection.nodes),\n\t\tedges,\n\t};\n}\n\nexport function toggle_node(selection: Selection_state, node_id: Node_id): Selection_state {\n\treturn selection.nodes.has(node_id)\n\t\t? deselect_node(selection, node_id)\n\t\t: select_node(selection, node_id, { append: true });\n}\n\nexport function toggle_edge(selection: Selection_state, edge_id: Edge_id): Selection_state {\n\treturn selection.edges.has(edge_id)\n\t\t? deselect_edge(selection, edge_id)\n\t\t: select_edge(selection, edge_id, { append: true });\n}\n\nexport function to_selection_arrays(selection: Selection_state): { nodes: Node_id[]; edges: Edge_id[] } {\n\treturn {\n\t\tnodes: [...selection.nodes],\n\t\tedges: [...selection.edges],\n\t};\n}\n"]}